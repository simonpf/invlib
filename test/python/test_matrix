"""
This test file tests the invlib Python interface for @FLOATTYPE@
precision types. A copy of this file is generated for each precision
type.
"""
import sys
sys.path.append("@INVLIB_PYTHONPATH@")

import invlib
import invlib.api
import pytest
from invlib.vector import Vector
from invlib.matrix import Matrix

import numpy as np
import scipy as sp
import scipy.sparse

from datetime import datetime
np.random.seed(datetime.now().day)

precision = np.dtype("@FLOATTYPE@")

def random_matrix(m, n, format = "dns"):
    """
    Create a random matrix of given format.

    Arguments:

        m(int): Number of rows of the matrix.

        n(int): Number of columns of the matrix.

        format: The format of the matrix: dns,
            csc, csr or hyb
    """
    if format == "dns":
        matrix = np.array(np.random.normal(size = (m, n)), precision)
    elif format == "csc":
        matrix = sp.sparse.csc_matrix((m, n), dtype = precision)
        for i in range(max(m, n)):
            ii = np.random.randint(m)
            jj = np.random.randint(n)
            matrix[ii, jj] = np.random.normal()
    elif format == "csr":
        matrix = sp.sparse.csr_matrix((m, n), dtype = precision)
        for i in range(max(m, n)):
            ii = np.random.randint(m)
            jj = np.random.randint(n)
            matrix[ii, jj] = np.random.normal()
    elif format == "hyb":
        matrix = sp.sparse.csc_matrix((m, n), dtype = precision)
        for i in range(max(m, n)):
            ii = np.random.randint(m)
            jj = np.random.randint(n)
            matrix[ii, jj] = np.random.normal()
        matrix = (matrix, sp.sparse.csr_matrix(matrix))
    else:
        raise Exception("Unknown format {0}.".format(format))

    return matrix

def random_vector(m):
    """
    Create a random vector.

    Arguments:

        m(int): Number of rows of the vector.
    """
    return np.array(np.random.normal(size = (m, 1)), dtype = precision)

################################################################################
# Tests
################################################################################

#
# Matrix info
#

def test_matrix_info(format = "dns"):
    m = np.random.randint(10, 100)
    n = np.random.randint(10, 100)

    A = random_matrix(m, n, format)
    A_ = Matrix(A, distributed = False)
    A = A_.matrix

    m, n, nnz, fi, elements, indices, starts = Matrix.matrix_info(
        A_.invlib_pointer, precision
    )

    if format == "dns":
        assert((m, n) == A.shape)
        print(elements)
        assert(np.all(elements[0] == A))

    if format in ["csc", "csr"]:
        assert(m, n) == A.shape
        assert(nnz == A.nnz)
        assert(np.all(elements[0] == A.data))
        assert(np.all(indices[0]  == A.indices))
        assert(np.all(starts[0]   == A.indptr))

    if format in ["hyb"]:
        assert(m, n) == A[0].shape
        assert(nnz == A[0].nnz)
        for i in range(2):
            assert(np.all(elements[i] == A[i].data))
            assert(np.all(indices[i] == A[i].indices))
            assert(np.all(starts[i] == A[i].indptr))

#
# Matrix-vector multiplications
#

def test_matrix_vector_multiplication(format = "dns"):
    m = np.random.randint(10, 100)
    n = np.random.randint(10, 100)

    A  = random_matrix(m, n, format)
    A_ = Matrix(A, distributed = False)
    u  = random_vector(n)
    u_ = Vector(u)

    if format == "hyb":
        v  = A[0] @ u
    else:
        v = A @ u

    v_ = A_.multiply(u_)
    assert(np.all(np.isclose(v, v_)))

def test_transpose_matrix_vector_multiplication(format = "dns"):
    m = np.random.randint(10, 100)
    n = np.random.randint(10, 100)

    A  = random_matrix(n, m, format)
    A_ = Matrix(A, distributed = False)
    u  = random_vector(n)
    u_ = Vector(u)

    if format == "hyb":
        v  = A[0].T @ u
    else:
        v = A.T @ u

    v_ = A_.transpose_multiply(u_)
    assert(np.all(np.isclose(v, v_)))

#
# Matrix-matrix multiplications
#

@pytest.mark.skipif(invlib.api.parallel,
                    reason="Multiplication not available for MPI matrices.")
def test_matrix_matrix_multiplication():
    m = np.random.randint(10, 100)
    n = np.random.randint(10, 100)
    k = np.random.randint(10, 100)

    A  = random_matrix(m, n, format = "dns")
    A_ = Matrix(A, distributed = False)
    B  = random_matrix(n, k, format = "dns")
    B_ = Matrix(B, distributed = False)
    C  = A @ B
    C_ = A_.multiply(B_)

    assert(np.all(np.isclose(C, C_.matrix)))

@pytest.mark.skipif(invlib.api.parallel,
                    reason="Multiplication not available for MPI matrices.")
def test_transpose_matrix_matrix_multiplication():

    m = np.random.randint(10, 100)
    n = np.random.randint(10, 100)
    k = np.random.randint(10, 100)

    A  = np.array(np.random.normal(size = (k, m)), dtype = precision)
    A_ = Matrix(A, distributed = False)
    B  = np.array(np.random.normal(size = (k, n)), dtype = precision)
    B_ = Matrix(B, distributed = False)
    C  = A.T @ B
    C_ = A_.transpose_multiply(B_)

    assert(np.all(np.isclose(C, C_.matrix)))
