import ctypes as c
import os
import numpy  as np
import ctypes as c

scalar_type = np.@FLOATTYPE@
path        = "@LIBINVLIB_PATH@" 
if scalar_type == np.float32:
    stride = 4
    c_type = c.c_float
    invlib = c.CDLL(os.path.join(path, "libinvlib_float.so"))
else:
    stride = 8
    c_type = c.c_double
    invlib = c.CDLL(os.path.join(path, "libinvlib_double.so"))


class forward_model_struct(c.Structure):

    _fields_ = [("m", c.c_ulong),
                ("n", c.c_ulong),
                ("jacobian_ptr", c.CFUNCTYPE(c.c_void_p, c.c_void_p, c.c_void_p)),
                ("evaluate_ptr", c.CFUNCTYPE(c.c_void_p, c.c_void_p))]

class optimizer_struct(c.Structure):

    _fields_ = [("type", c.c_ulong),
                ("params", c.c_void_p),
                ("solver_ptr", c.c_void_p)]

#
# Vectors
#

invlib.create_vector.argtypes = [c.c_void_p, c.c_uint64, c.c_bool]
invlib.create_vector.restype  = c.c_void_p

invlib.vector_rows.argtypes = [c.c_void_p]
invlib.vector_rows.restype  = c.c_uint64

invlib.vector_element_pointer.argtypes = [c.c_void_p]
invlib.vector_element_pointer.restype  = c.c_void_p

invlib.vector_dot.argtypes = [c.c_void_p, c.c_void_p]
invlib.vector_dot.restype  = c_type

invlib.vector_add.argtypes = [c.c_void_p, c.c_void_p]
invlib.vector_add.restype  = c.c_void_p

invlib.vector_subtract.argtypes = [c.c_void_p, c.c_void_p]
invlib.vector_subtract.restype  = c.c_void_p

invlib.vector_scale.argtypes = [c.c_void_p, c_type]
invlib.vector_scale.restype  = None

#
# Matrices
#

invlib.create_matrix.argtypes = [c.c_uint64, c.c_uint64, c.c_uint64, c.c_void_p,\
                                 c.c_void_p, c.c_uint, c.c_bool]
invlib.create_matrix.restype  = c.c_void_p

invlib.matrix_rows.argtypes = [c.c_void_p]
invlib.matrix_rows.restype  = c.c_uint64

invlib.matrix_cols.argtypes = [c.c_void_p]
invlib.matrix_cols.restype  = c.c_uint64

invlib.matrix_non_zeros.argtypes = [c.c_void_p]
invlib.matrix_non_zeros.restype  = c.c_uint64

invlib.matrix_format.argtypes = [c.c_void_p]
invlib.matrix_format.restype  = c.c_uint

invlib.matrix_element_pointer.argtypes = [c.c_void_p]
invlib.matrix_element_pointer.restype  = c.c_void_p

invlib.matrix_index_pointer.argtypes = [c.c_void_p]
invlib.matrix_index_pointer.restype  = c.c_void_p

invlib.matrix_start_pointer.argtypes = [c.c_void_p]
invlib.matrix_start_pointer.restype  = c.c_void_p

invlib.matrix_matrix_multiply.argtypes = [c.c_void_p, c.c_void_p]
invlib.matrix_matrix_multiply.restype  = c.c_void_p

invlib.matrix_matrix_transpose_multiply.argtypes = [c.c_void_p, c.c_void_p]
invlib.matrix_matrix_transpose_multiply.restype  = c.c_void_p

invlib.matrix_vector_multiply.argtypes = [c.c_void_p, c.c_void_p]
invlib.matrix_vector_multiply.restype  = c.c_void_p

invlib.matrix_vector_transpose_multiply.argtypes = [c.c_void_p, c.c_void_p]
invlib.matrix_vector_transpose_multiply.restype  = c.c_void_p

#
# Solver
#

invlib.create_solver.argtypes = [c_type, c.c_uint, c.c_int]
invlib.create_solver.restype  = c.c_void_p

invlib.destroy_solver.argtypes = [c.c_void_p]
invlib.destroy_solver.restype  = None

invlib.solver_get_tolerance.argtypes = [c.c_void_p]
invlib.solver_get_tolerance.restype = c_type

invlib.solver_set_tolerance.argtypes = [c.c_void_p, c_type]
invlib.solver_set_tolerance.restype = None

invlib.solver_get_step_limit.argtypes = [c.c_void_p]
invlib.solver_get_step_limit.restype = c.c_int

invlib.solver_set_step_limit.argtypes = [c.c_void_p, c.c_int]
invlib.solver_set_step_limit.restype = None

invlib.solver_set_start_vector_ptr.argtypes = [c.c_void_p, c.c_void_p]
invlib.solver_set_start_vector_ptr.restype = None

invlib.solver_solve.argtypes = [c.c_void_p, c.c_void_p, c.c_void_p]
invlib.solver_solve.restype  = c.c_void_p

#
# Forward model
#

invlib.forward_model_evaluate.argtypes = [forward_model_struct, c.c_void_p]
invlib.forward_model_evaluate.restype  = c.c_void_p

invlib.forward_model_jacobian.argtypes = [forward_model_struct, c.c_void_p]
invlib.forward_model_jacobian.restype  = c.c_void_p

#
# OEM
#

#invlib.oem = [forward_model_struct,
#              c.c_void_p,
#              c.c_void_p,
#              c.c_void_p,
#              c.c_void_p,
#              optimizer_struct]
#
#invlib.oem = c.c_void_p
